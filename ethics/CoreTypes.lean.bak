/-
Ethics Core Types
=================

Central type definitions used across the ethics layer.  These are **minimal**
place-holders so that all other files can compile.  They will be replaced with
fully verified versions as we eliminate `sorry`s in later passes.
-/

import RecognitionScience

namespace RecognitionScience.Ethics

/-! ### Fundamental numeric wrappers -/

/-- Energy value in arbitrary units (placeholder). -/
structure Energy where
  cost : Float

/-- Basic positive-cost lemma placeholder. -/
lemma Energy.cost_pos (e : Energy) : e.cost ≥ 0 := by
  have : (0 : Float) ≤ e.cost := by
    -- placeholder proof - will use PositiveCost foundation later
    sorry
  exact this

/-- Ledger entry representing a debit or credit.  We re-export `Entry` from the
foundation’s `DualBalance` so all ethics files can keep using the same name. -/
structure Entry where
  debit : Int
  credit : Int

/-- Minimal ledger state: just running debit/credit counters and balance. -/
structure LedgerState where
  entries : List Entry := []
  debits  : Int := 0
  credits : Int := 0
  balance : Int := debits - credits

namespace LedgerState

/-- Empty ledger is balanced. -/
@[simp] def empty : LedgerState := {}

end LedgerState

/-- Time interval measured in "ticks" (placeholder). -/
structure TimeInterval where
  ticks : Nat

/-- Primary moral-state record used in many ethics proofs. -/
structure MoralState where
  ledger : LedgerState
  energy : Energy
  valid  : energy.cost > 0

/-! ### Convenience constructors -/

noncomputable def MoralState.zero : MoralState :=
  { ledger := LedgerState.empty,
    energy := { cost := 1 },
    valid := by sorry }

end RecognitionScience.Ethics
